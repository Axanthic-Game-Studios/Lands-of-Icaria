package com.axanthic.icaria.common.shapes;

import net.minecraft.MethodsReturnNonnullByDefault;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.phys.shapes.BooleanOp;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

import java.util.stream.Stream;

import javax.annotation.ParametersAreNonnullByDefault;

@MethodsReturnNonnullByDefault
@ParametersAreNonnullByDefault

public class GrinderShapes {
	public static final VoxelShape LEFT_NORTH = Stream.of(Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(0.0D, 1.0D, 0.0D, 15.0D, 3.0D, 16.0D), Block.box(15.0D, 1.0D, 1.0D, 16.0D, 3.0D, 15.0D), Block.box(15.0D, 1.0D, 15.0D, 16.0D, 3.0D, 16.0D), Block.box(15.0D, 1.0D, 0.0D, 16.0D, 3.0D, 1.0D), Block.box(0.0D, 3.0D, 0.0D, 16.0D, 4.0D, 16.0D), Block.box(3.0D, 4.0D, 4.0D, 13.0D, 5.0D, 12.0D), Block.box(13.0D, 4.0D, 3.0D, 15.0D, 12.0D, 13.0D), Block.box(1.0D, 4.0D, 3.0D, 3.0D, 10.0D, 13.0D), Block.box(1.0D, 10.0D, 3.0D, 3.0D, 12.0D, 6.0D), Block.box(1.0D, 10.0D, 10.0D, 3.0D, 12.0D, 13.0D), Block.box(3.0D, 4.0D, 13.0D, 13.0D, 12.0D, 15.0D), Block.box(3.0D, 4.0D, 3.0D, 4.0D, 12.0D, 4.0D), Block.box(2.0D, 4.0D, 2.0D, 3.0D, 12.0D, 3.0D), Block.box(13.0D, 4.0D, 2.0D, 14.0D, 12.0D, 3.0D), Block.box(12.0D, 4.0D, 3.0D, 13.0D, 12.0D, 4.0D), Block.box(13.0D, 4.0D, 13.0D, 14.0D, 12.0D, 14.0D), Block.box(12.0D, 4.0D, 12.0D, 13.0D, 12.0D, 13.0D), Block.box(3.0D, 4.0D, 12.0D, 4.0D, 12.0D, 13.0D), Block.box(2.0D, 4.0D, 13.0D, 3.0D, 12.0D, 14.0D), Block.box(4.0D, 4.0D, 3.0D, 12.0D, 5.0D, 4.0D), Block.box(4.0D, 4.0D, 12.0D, 12.0D, 5.0D, 13.0D), Block.box(3.0D, 4.0D, 1.0D, 13.0D, 12.0D, 3.0D), Block.box(-16.0D, 0.0D, 0.0D, 0.0D, 1.0D, 16.0D), Block.box(-15.0D, 1.0D, 0.0D, 0.0D, 3.0D, 16.0D), Block.box(-16.0D, 1.0D, 1.0D, -15.0D, 3.0D, 15.0D), Block.box(-16.0D, 1.0D, 0.0D, -15.0D, 3.0D, 1.0D), Block.box(-16.0D, 1.0D, 15.0D, -15.0D, 3.0D, 16.0D), Block.box(-16.0D, 3.0D, 0.0D, -11.0D, 4.0D, 16.0D), Block.box(-15.0D, 4.0D, 1.0D, -1.0D, 5.0D, 11.0D), Block.box(-14.0D, 4.0D, 11.0D, -2.0D, 11.0D, 15.0D), Block.box(-2.0D, 4.0D, 11.0D, -1.0D, 5.0D, 13.0D), Block.box(-15.0D, 4.0D, 11.0D, -14.0D, 5.0D, 13.0D), Block.box(-5.0D, 3.0D, 0.0D, 0.0D, 4.0D, 16.0D), Block.box(-11.0D, 3.0D, 0.0D, -5.0D, 4.0D, 15.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();
	public static final VoxelShape LEFT_EAST = Stream.of(Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(0.0D, 1.0D, 0.0D, 16.0D, 3.0D, 15.0D), Block.box(1.0D, 1.0D, 15.0D, 15.0D, 3.0D, 16.0D), Block.box(0.0D, 1.0D, 15.0D, 1.0D, 3.0D, 16.0D), Block.box(15.0D, 1.0D, 15.0D, 16.0D, 3.0D, 16.0D), Block.box(0.0D, 3.0D, 0.0D, 16.0D, 4.0D, 16.0D), Block.box(4.0D, 4.0D, 3.0D, 12.0D, 5.0D, 13.0D), Block.box(3.0D, 4.0D, 13.0D, 13.0D, 12.0D, 15.0D), Block.box(3.0D, 4.0D, 1.0D, 13.0D, 10.0D, 3.0D), Block.box(10.0D, 10.0D, 1.0D, 13.0D, 12.0D, 3.0D), Block.box(3.0D, 10.0D, 1.0D, 6.0D, 12.0D, 3.0D), Block.box(1.0D, 4.0D, 3.0D, 3.0D, 12.0D, 13.0D), Block.box(12.0D, 4.0D, 3.0D, 13.0D, 12.0D, 4.0D), Block.box(13.0D, 4.0D, 2.0D, 14.0D, 12.0D, 3.0D), Block.box(13.0D, 4.0D, 13.0D, 14.0D, 12.0D, 14.0D), Block.box(12.0D, 4.0D, 12.0D, 13.0D, 12.0D, 13.0D), Block.box(2.0D, 4.0D, 13.0D, 3.0D, 12.0D, 14.0D), Block.box(3.0D, 4.0D, 12.0D, 4.0D, 12.0D, 13.0D), Block.box(3.0D, 4.0D, 3.0D, 4.0D, 12.0D, 4.0D), Block.box(2.0D, 4.0D, 2.0D, 3.0D, 12.0D, 3.0D), Block.box(12.0D, 4.0D, 4.0D, 13.0D, 5.0D, 12.0D), Block.box(3.0D, 4.0D, 4.0D, 4.0D, 5.0D, 12.0D), Block.box(13.0D, 4.0D, 3.0D, 15.0D, 12.0D, 13.0D), Block.box(0.0D, 0.0D, -16.0D, 16.0D, 1.0D, 0.0D), Block.box(0.0D, 1.0D, -15.0D, 16.0D, 3.0D, 0.0D), Block.box(1.0D, 1.0D, -16.0D, 15.0D, 3.0D, -15.0D), Block.box(15.0D, 1.0D, -16.0D, 16.0D, 3.0D, -15.0D), Block.box(0.0D, 1.0D, -16.0D, 1.0D, 3.0D, -15.0D), Block.box(0.0D, 3.0D, -16.0D, 16.0D, 4.0D, -11.0D), Block.box(5.0D, 4.0D, -15.0D, 15.0D, 5.0D, -1.0D), Block.box(1.0D, 4.0D, -14.0D, 5.0D, 11.0D, -2.0D), Block.box(3.0D, 4.0D, -2.0D, 5.0D, 5.0D, -1.0D), Block.box(3.0D, 4.0D, -15.0D, 5.0D, 5.0D, -14.0D), Block.box(0.0D, 3.0D, -5.0D, 16.0D, 4.0D, 0.0D), Block.box(1.0D, 3.0D, -11.0D, 16.0D, 4.0D, -5.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();
	public static final VoxelShape LEFT_SOUTH = Stream.of(Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(1.0D, 1.0D, 0.0D, 16.0D, 3.0D, 16.0D), Block.box(0.0D, 1.0D, 1.0D, 1.0D, 3.0D, 15.0D), Block.box(0.0D, 1.0D, 0.0D, 1.0D, 3.0D, 1.0D), Block.box(0.0D, 1.0D, 15.0D, 1.0D, 3.0D, 16.0D), Block.box(0.0D, 3.0D, 0.0D, 16.0D, 4.0D, 16.0D), Block.box(3.0D, 4.0D, 4.0D, 13.0D, 5.0D, 12.0D), Block.box(1.0D, 4.0D, 3.0D, 3.0D, 12.0D, 13.0D), Block.box(13.0D, 4.0D, 3.0D, 15.0D, 10.0D, 13.0D), Block.box(13.0D, 10.0D, 10.0D, 15.0D, 12.0D, 13.0D), Block.box(13.0D, 10.0D, 3.0D, 15.0D, 12.0D, 6.0D), Block.box(3.0D, 4.0D, 1.0D, 13.0D, 12.0D, 3.0D), Block.box(12.0D, 4.0D, 12.0D, 13.0D, 12.0D, 13.0D), Block.box(13.0D, 4.0D, 13.0D, 14.0D, 12.0D, 14.0D), Block.box(2.0D, 4.0D, 13.0D, 3.0D, 12.0D, 14.0D), Block.box(3.0D, 4.0D, 12.0D, 4.0D, 12.0D, 13.0D), Block.box(2.0D, 4.0D, 2.0D, 3.0D, 12.0D, 3.0D), Block.box(3.0D, 4.0D, 3.0D, 4.0D, 12.0D, 4.0D), Block.box(12.0D, 4.0D, 3.0D, 13.0D, 12.0D, 4.0D), Block.box(13.0D, 4.0D, 2.0D, 14.0D, 12.0D, 3.0D), Block.box(4.0D, 4.0D, 12.0D, 12.0D, 5.0D, 13.0D), Block.box(4.0D, 4.0D, 3.0D, 12.0D, 5.0D, 4.0D), Block.box(3.0D, 4.0D, 13.0D, 13.0D, 12.0D, 15.0D), Block.box(16.0D, 0.0D, 0.0D, 32.0D, 1.0D, 16.0D), Block.box(16.0D, 1.0D, 0.0D, 31.0D, 3.0D, 16.0D), Block.box(31.0D, 1.0D, 1.0D, 32.0D, 3.0D, 15.0D), Block.box(31.0D, 1.0D, 15.0D, 32.0D, 3.0D, 16.0D), Block.box(31.0D, 1.0D, 0.0D, 32.0D, 3.0D, 1.0D), Block.box(27.0D, 3.0D, 0.0D, 32.0D, 4.0D, 16.0D), Block.box(17.0D, 4.0D, 5.0D, 31.0D, 5.0D, 15.0D), Block.box(18.0D, 4.0D, 1.0D, 30.0D, 11.0D, 5.0D), Block.box(17.0D, 4.0D, 3.0D, 18.0D, 5.0D, 5.0D), Block.box(30.0D, 4.0D, 3.0D, 31.0D, 5.0D, 5.0D), Block.box(16.0D, 3.0D, 0.0D, 21.0D, 4.0D, 16.0D), Block.box(21.0D, 3.0D, 1.0D, 27.0D, 4.0D, 16.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();
	public static final VoxelShape LEFT_WEST = Stream.of(Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(0.0D, 1.0D, 1.0D, 16.0D, 3.0D, 16.0D), Block.box(1.0D, 1.0D, 0.0D, 15.0D, 3.0D, 1.0D), Block.box(15.0D, 1.0D, 0.0D, 16.0D, 3.0D, 1.0D), Block.box(0.0D, 1.0D, 0.0D, 1.0D, 3.0D, 1.0D), Block.box(0.0D, 3.0D, 0.0D, 16.0D, 4.0D, 16.0D), Block.box(4.0D, 4.0D, 3.0D, 12.0D, 5.0D, 13.0D), Block.box(3.0D, 4.0D, 1.0D, 13.0D, 12.0D, 3.0D), Block.box(3.0D, 4.0D, 13.0D, 13.0D, 10.0D, 15.0D), Block.box(3.0D, 10.0D, 13.0D, 6.0D, 12.0D, 15.0D), Block.box(10.0D, 10.0D, 13.0D, 13.0D, 12.0D, 15.0D), Block.box(13.0D, 4.0D, 3.0D, 15.0D, 12.0D, 13.0D), Block.box(3.0D, 4.0D, 12.0D, 4.0D, 12.0D, 13.0D), Block.box(2.0D, 4.0D, 13.0D, 3.0D, 12.0D, 14.0D), Block.box(2.0D, 4.0D, 2.0D, 3.0D, 12.0D, 3.0D), Block.box(3.0D, 4.0D, 3.0D, 4.0D, 12.0D, 4.0D), Block.box(13.0D, 4.0D, 2.0D, 14.0D, 12.0D, 3.0D), Block.box(12.0D, 4.0D, 3.0D, 13.0D, 12.0D, 4.0D), Block.box(12.0D, 4.0D, 12.0D, 13.0D, 12.0D, 13.0D), Block.box(13.0D, 4.0D, 13.0D, 14.0D, 12.0D, 14.0D), Block.box(3.0D, 4.0D, 4.0D, 4.0D, 5.0D, 12.0D), Block.box(12.0D, 4.0D, 4.0D, 13.0D, 5.0D, 12.0D), Block.box(1.0D, 4.0D, 3.0D, 3.0D, 12.0D, 13.0D), Block.box(0.0D, 0.0D, 16.0D, 16.0D, 1.0D, 32.0D), Block.box(0.0D, 1.0D, 16.0D, 16.0D, 3.0D, 31.0D), Block.box(1.0D, 1.0D, 31.0D, 15.0D, 3.0D, 32.0D), Block.box(0.0D, 1.0D, 31.0D, 1.0D, 3.0D, 32.0D), Block.box(15.0D, 1.0D, 31.0D, 16.0D, 3.0D, 32.0D), Block.box(0.0D, 3.0D, 27.0D, 16.0D, 4.0D, 32.0D), Block.box(1.0D, 4.0D, 17.0D, 11.0D, 5.0D, 31.0D), Block.box(11.0D, 4.0D, 18.0D, 15.0D, 11.0D, 30.0D), Block.box(11.0D, 4.0D, 17.0D, 13.0D, 5.0D, 18.0D), Block.box(11.0D, 4.0D, 30.0D, 13.0D, 5.0D, 31.0D), Block.box(0.0D, 3.0D, 16.0D, 16.0D, 4.0D, 21.0D), Block.box(0.0D, 3.0D, 21.0D, 15.0D, 4.0D, 27.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();

	public static final VoxelShape RIGHT_NORTH = Stream.of(Block.box(16.0D, 0.0D, 0.0D, 32.0D, 1.0D, 16.0D), Block.box(16.0D, 1.0D, 0.0D, 31.0D, 3.0D, 16.0D), Block.box(31.0D, 1.0D, 1.0D, 32.0D, 3.0D, 15.0D), Block.box(31.0D, 1.0D, 15.0D, 32.0D, 3.0D, 16.0D), Block.box(31.0D, 1.0D, 0.0D, 32.0D, 3.0D, 1.0D), Block.box(16.0D, 3.0D, 0.0D, 32.0D, 4.0D, 16.0D), Block.box(19.0D, 4.0D, 4.0D, 29.0D, 5.0D, 12.0D), Block.box(29.0D, 4.0D, 3.0D, 31.0D, 12.0D, 13.0D), Block.box(17.0D, 4.0D, 3.0D, 19.0D, 10.0D, 13.0D), Block.box(17.0D, 10.0D, 3.0D, 19.0D, 12.0D, 6.0D), Block.box(17.0D, 10.0D, 10.0D, 19.0D, 12.0D, 13.0D), Block.box(19.0D, 4.0D, 13.0D, 29.0D, 12.0D, 15.0D), Block.box(19.0D, 4.0D, 3.0D, 20.0D, 12.0D, 4.0D), Block.box(18.0D, 4.0D, 2.0D, 19.0D, 12.0D, 3.0D), Block.box(29.0D, 4.0D, 2.0D, 30.0D, 12.0D, 3.0D), Block.box(28.0D, 4.0D, 3.0D, 29.0D, 12.0D, 4.0D), Block.box(29.0D, 4.0D, 13.0D, 30.0D, 12.0D, 14.0D), Block.box(28.0D, 4.0D, 12.0D, 29.0D, 12.0D, 13.0D), Block.box(19.0D, 4.0D, 12.0D, 20.0D, 12.0D, 13.0D), Block.box(18.0D, 4.0D, 13.0D, 19.0D, 12.0D, 14.0D), Block.box(20.0D, 4.0D, 3.0D, 28.0D, 5.0D, 4.0D), Block.box(20.0D, 4.0D, 12.0D, 28.0D, 5.0D, 13.0D), Block.box(19.0D, 4.0D, 1.0D, 29.0D, 12.0D, 3.0D), Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(1.0D, 1.0D, 0.0D, 16.0D, 3.0D, 16.0D), Block.box(0.0D, 1.0D, 1.0D, 1.0D, 3.0D, 15.0D), Block.box(0.0D, 1.0D, 0.0D, 1.0D, 3.0D, 1.0D), Block.box(0.0D, 1.0D, 15.0D, 1.0D, 3.0D, 16.0D), Block.box(0.0D, 3.0D, 0.0D, 5.0D, 4.0D, 16.0D), Block.box(1.0D, 4.0D, 1.0D, 15.0D, 5.0D, 11.0D), Block.box(2.0D, 4.0D, 11.0D, 14.0D, 11.0D, 15.0D), Block.box(14.0D, 4.0D, 11.0D, 15.0D, 5.0D, 13.0D), Block.box(1.0D, 4.0D, 11.0D, 2.0D, 5.0D, 13.0D), Block.box(11.0D, 3.0D, 0.0D, 16.0D, 4.0D, 16.0D), Block.box(5.0D, 3.0D, 0.0D, 11.0D, 4.0D, 15.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();
	public static final VoxelShape RIGHT_EAST = Stream.of(Block.box(0.0D, 0.0D, 16.0D, 16.0D, 1.0D, 32.0D), Block.box(0.0D, 1.0D, 16.0D, 16.0D, 3.0D, 31.0D), Block.box(1.0D, 1.0D, 31.0D, 15.0D, 3.0D, 32.0D), Block.box(0.0D, 1.0D, 31.0D, 1.0D, 3.0D, 32.0D), Block.box(15.0D, 1.0D, 31.0D, 16.0D, 3.0D, 32.0D), Block.box(0.0D, 3.0D, 16.0D, 16.0D, 4.0D, 32.0D), Block.box(4.0D, 4.0D, 19.0D, 12.0D, 5.0D, 29.0D), Block.box(3.0D, 4.0D, 29.0D, 13.0D, 12.0D, 31.0D), Block.box(3.0D, 4.0D, 17.0D, 13.0D, 10.0D, 19.0D), Block.box(10.0D, 10.0D, 17.0D, 13.0D, 12.0D, 19.0D), Block.box(3.0D, 10.0D, 17.0D, 6.0D, 12.0D, 19.0D), Block.box(1.0D, 4.0D, 19.0D, 3.0D, 12.0D, 29.0D), Block.box(12.0D, 4.0D, 19.0D, 13.0D, 12.0D, 20.0D), Block.box(13.0D, 4.0D, 18.0D, 14.0D, 12.0D, 19.0D), Block.box(13.0D, 4.0D, 29.0D, 14.0D, 12.0D, 30.0D), Block.box(12.0D, 4.0D, 28.0D, 13.0D, 12.0D, 29.0D), Block.box(2.0D, 4.0D, 29.0D, 3.0D, 12.0D, 30.0D), Block.box(3.0D, 4.0D, 28.0D, 4.0D, 12.0D, 29.0D), Block.box(3.0D, 4.0D, 19.0D, 4.0D, 12.0D, 20.0D), Block.box(2.0D, 4.0D, 18.0D, 3.0D, 12.0D, 19.0D), Block.box(12.0D, 4.0D, 20.0D, 13.0D, 5.0D, 28.0D), Block.box(3.0D, 4.0D, 20.0D, 4.0D, 5.0D, 28.0D), Block.box(13.0D, 4.0D, 19.0D, 15.0D, 12.0D, 29.0D), Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(0.0D, 1.0D, 1.0D, 16.0D, 3.0D, 16.0D), Block.box(1.0D, 1.0D, 0.0D, 15.0D, 3.0D, 1.0D), Block.box(15.0D, 1.0D, 0.0D, 16.0D, 3.0D, 1.0D), Block.box(0.0D, 1.0D, 0.0D, 1.0D, 3.0D, 1.0D), Block.box(0.0D, 3.0D, 0.0D, 16.0D, 4.0D, 5.0D), Block.box(5.0D, 4.0D, 1.0D, 15.0D, 5.0D, 15.0D), Block.box(1.0D, 4.0D, 2.0D, 5.0D, 11.0D, 14.0D), Block.box(3.0D, 4.0D, 14.0D, 5.0D, 5.0D, 15.0D), Block.box(3.0D, 4.0D, 1.0D, 5.0D, 5.0D, 2.0D), Block.box(0.0D, 3.0D, 11.0D, 16.0D, 4.0D, 16.0D), Block.box(1.0D, 3.0D, 5.0D, 16.0D, 4.0D, 11.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();
	public static final VoxelShape RIGHT_SOUTH = Stream.of(Block.box(-16.0D, 0.0D, 0.0D, 0.0D, 1.0D, 16.0D), Block.box(-15.0D, 1.0D, 0.0D, 0.0D, 3.0D, 16.0D), Block.box(-16.0D, 1.0D, 1.0D, -15.0D, 3.0D, 15.0D), Block.box(-16.0D, 1.0D, 0.0D, -15.0D, 3.0D, 1.0D), Block.box(-16.0D, 1.0D, 15.0D, -15.0D, 3.0D, 16.0D), Block.box(-16.0D, 3.0D, 0.0D, 0.0D, 4.0D, 16.0D), Block.box(-13.0D, 4.0D, 4.0D, -3.0D, 5.0D, 12.0D), Block.box(-15.0D, 4.0D, 3.0D, -13.0D, 12.0D, 13.0D), Block.box(-3.0D, 4.0D, 3.0D, -1.0D, 10.0D, 13.0D), Block.box(-3.0D, 10.0D, 10.0D, -1.0D, 12.0D, 13.0D), Block.box(-3.0D, 10.0D, 3.0D, -1.0D, 12.0D, 6.0D), Block.box(-13.0D, 4.0D, 1.0D, -3.0D, 12.0D, 3.0D), Block.box(-4.0D, 4.0D, 12.0D, -3.0D, 12.0D, 13.0D), Block.box(-3.0D, 4.0D, 13.0D, -2.0D, 12.0D, 14.0D), Block.box(-14.0D, 4.0D, 13.0D, -13.0D, 12.0D, 14.0D), Block.box(-13.0D, 4.0D, 12.0D, -12.0D, 12.0D, 13.0D), Block.box(-14.0D, 4.0D, 2.0D, -13.0D, 12.0D, 3.0D), Block.box(-13.0D, 4.0D, 3.0D, -12.0D, 12.0D, 4.0D), Block.box(-4.0D, 4.0D, 3.0D, -3.0D, 12.0D, 4.0D), Block.box(-3.0D, 4.0D, 2.0D, -2.0D, 12.0D, 3.0D), Block.box(-12.0D, 4.0D, 12.0D, -4.0D, 5.0D, 13.0D), Block.box(-12.0D, 4.0D, 3.0D, -4.0D, 5.0D, 4.0D), Block.box(-13.0D, 4.0D, 13.0D, -3.0D, 12.0D, 15.0D), Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(0.0D, 1.0D, 0.0D, 15.0D, 3.0D, 16.0D), Block.box(15.0D, 1.0D, 1.0D, 16.0D, 3.0D, 15.0D), Block.box(15.0D, 1.0D, 15.0D, 16.0D, 3.0D, 16.0D), Block.box(15.0D, 1.0D, 0.0D, 16.0D, 3.0D, 1.0D), Block.box(11.0D, 3.0D, 0.0D, 16.0D, 4.0D, 16.0D), Block.box(1.0D, 4.0D, 5.0D, 15.0D, 5.0D, 15.0D), Block.box(2.0D, 4.0D, 1.0D, 14.0D, 11.0D, 5.0D), Block.box(1.0D, 4.0D, 3.0D, 2.0D, 5.0D, 5.0D), Block.box(14.0D, 4.0D, 3.0D, 15.0D, 5.0D, 5.0D), Block.box(0.0D, 3.0D, 0.0D, 5.0D, 4.0D, 16.0D), Block.box(5.0D, 3.0D, 1.0D, 11.0D, 4.0D, 16.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();
	public static final VoxelShape RIGHT_WEST = Stream.of(Block.box(0.0D, 0.0D, -16.0D, 16.0D, 1.0D, 0.0D), Block.box(0.0D, 1.0D, -15.0D, 16.0D, 3.0D, 0.0D), Block.box(1.0D, 1.0D, -16.0D, 15.0D, 3.0D, -15.0D), Block.box(15.0D, 1.0D, -16.0D, 16.0D, 3.0D, -15.0D), Block.box(0.0D, 1.0D, -16.0D, 1.0D, 3.0D, -15.0D), Block.box(0.0D, 3.0D, -16.0D, 16.0D, 4.0D, 0.0D), Block.box(4.0D, 4.0D, -13.0D, 12.0D, 5.0D, -3.0D), Block.box(3.0D, 4.0D, -15.0D, 13.0D, 12.0D, -13.0D), Block.box(3.0D, 4.0D, -3.0D, 13.0D, 10.0D, -1.0D), Block.box(3.0D, 10.0D, -3.0D, 6.0D, 12.0D, -1.0D), Block.box(10.0D, 10.0D, -3.0D, 13.0D, 12.0D, -1.0D), Block.box(13.0D, 4.0D, -13.0D, 15.0D, 12.0D, -3.0D), Block.box(3.0D, 4.0D, -4.0D, 4.0D, 12.0D, -3.0D), Block.box(2.0D, 4.0D, -3.0D, 3.0D, 12.0D, -2.0D), Block.box(2.0D, 4.0D, -14.0D, 3.0D, 12.0D, -13.0D), Block.box(3.0D, 4.0D, -13.0D, 4.0D, 12.0D, -12.0D), Block.box(13.0D, 4.0D, -14.0D, 14.0D, 12.0D, -13.0D), Block.box(12.0D, 4.0D, -13.0D, 13.0D, 12.0D, -12.0D), Block.box(12.0D, 4.0D, -4.0D, 13.0D, 12.0D, -3.0D), Block.box(13.0D, 4.0D, -3.0D, 14.0D, 12.0D, -2.0D), Block.box(3.0D, 4.0D, -12.0D, 4.0D, 5.0D, -4.0D), Block.box(12.0D, 4.0D, -12.0D, 13.0D, 5.0D, -4.0D), Block.box(1.0D, 4.0D, -13.0D, 3.0D, 12.0D, -3.0D), Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D), Block.box(0.0D, 1.0D, 0.0D, 16.0D, 3.0D, 15.0D), Block.box(1.0D, 1.0D, 15.0D, 15.0D, 3.0D, 16.0D), Block.box(0.0D, 1.0D, 15.0D, 1.0D, 3.0D, 16.0D), Block.box(15.0D, 1.0D, 15.0D, 16.0D, 3.0D, 16.0D), Block.box(0.0D, 3.0D, 11.0D, 16.0D, 4.0D, 16.0D), Block.box(1.0D, 4.0D, 1.0D, 11.0D, 5.0D, 15.0D), Block.box(11.0D, 4.0D, 2.0D, 15.0D, 11.0D, 14.0D), Block.box(11.0D, 4.0D, 1.0D, 13.0D, 5.0D, 2.0D), Block.box(11.0D, 4.0D, 14.0D, 13.0D, 5.0D, 15.0D), Block.box(0.0D, 3.0D, 0.0D, 16.0D, 4.0D, 5.0D), Block.box(0.0D, 3.0D, 5.0D, 15.0D, 4.0D, 11.0D)).reduce((a, b) -> Shapes.join(a, b, BooleanOp.OR)).get();
}
